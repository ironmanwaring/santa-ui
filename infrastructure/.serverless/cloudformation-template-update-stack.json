{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Self contained Santa Swap ui application code and infrastructure including hosting, DNS, CDN, and certificates",
  "Resources": {
    "EmptyBucketLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/santaSwap-ui-phillip-emptyBucket"
      }
    },
    "BucketEventLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/santaSwap-ui-phillip-bucketEvent"
      }
    },
    "InvalidateCDNLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/santaSwap-ui-phillip-invalidateCDN"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "phillip",
                  "santaSwap-ui",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "EmptyBucketLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "BucketEventLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "InvalidateCDNLogGroup",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          {
                            "Fn::GetAtt": [
                              "EmptyBucketLogGroup",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        ":",
                        [
                          {
                            "Fn::GetAtt": [
                              "BucketEventLogGroup",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        ":",
                        [
                          {
                            "Fn::GetAtt": [
                              "InvalidateCDNLogGroup",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "santaSwap-ui",
              "phillip",
              "us-east-1",
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "EmptyBucketLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "automation-serverlessartifact-109092357768",
          "S3Key": "serverless/santaSwap-ui/phillip/1488691739003-2017-03-05T05:28:59.003Z/santaSwap-ui.zip"
        },
        "FunctionName": "santaSwap-ui-phillip-emptyBucket",
        "Handler": "empty-bucket.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 6
      },
      "DependsOn": [
        "IamRoleLambdaExecution"
      ]
    },
    "EmptyBucketLambdaVersionDuZZ5iQlNjByv2X0xkPEOdX1BkTebUInrUWveqvItI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EmptyBucketLambdaFunction"
        },
        "CodeSha256": "DuZZ5iQlNjByv2X0xkPEOdX1BkTebUInrUWv/eqvItI="
      }
    },
    "BucketEventLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "automation-serverlessartifact-109092357768",
          "S3Key": "serverless/santaSwap-ui/phillip/1488691739003-2017-03-05T05:28:59.003Z/santaSwap-ui.zip"
        },
        "FunctionName": "santaSwap-ui-phillip-bucketEvent",
        "Handler": "bucket-event.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 6
      },
      "DependsOn": [
        "IamRoleLambdaExecution"
      ]
    },
    "BucketEventLambdaVersionDuZZ5iQlNjByv2X0xkPEOdX1BkTebUInrUWveqvItI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "BucketEventLambdaFunction"
        },
        "CodeSha256": "DuZZ5iQlNjByv2X0xkPEOdX1BkTebUInrUWv/eqvItI="
      }
    },
    "InvalidateCDNLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "automation-serverlessartifact-109092357768",
          "S3Key": "serverless/santaSwap-ui/phillip/1488691739003-2017-03-05T05:28:59.003Z/santaSwap-ui.zip"
        },
        "FunctionName": "santaSwap-ui-phillip-invalidateCDN",
        "Handler": "invalidate-cdn.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "CDN": {
              "Fn::If": [
                "Prod",
                {
                  "Ref": "CDN"
                },
                ""
              ]
            }
          }
        }
      },
      "DependsOn": [
        "IamRoleLambdaExecution"
      ]
    },
    "InvalidateCDNLambdaVersionDuZZ5iQlNjByv2X0xkPEOdX1BkTebUInrUWveqvItI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "InvalidateCDNLambdaFunction"
        },
        "CodeSha256": "DuZZ5iQlNjByv2X0xkPEOdX1BkTebUInrUWv/eqvItI="
      }
    },
    "S3BucketSite": {
      "Type": "AWS::S3::Bucket",
      "DependsOn": [
        "BucketEventLambdaPermissionS3BucketS3"
      ],
      "Properties": {
        "BucketName": "phillip.santaswap.io",
        "AccessControl": "PublicRead",
        "WebsiteConfiguration": {
          "IndexDocument": "index.html",
          "ErrorDocument": "index.html"
        },
        "NotificationConfiguration": {
          "LambdaConfigurations": [
            {
              "Event": "s3:ObjectCreated:*",
              "Function": {
                "Fn::GetAtt": [
                  "BucketEventLambdaFunction",
                  "Arn"
                ]
              }
            }
          ]
        }
      }
    },
    "BucketEventLambdaPermissionS3BucketS3": {
      "DependsOn": [
        "BucketEventLambdaFunction"
      ],
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "BucketEventLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "s3.amazonaws.com",
        "SourceArn": "arn:aws:s3:::phillip.santaswap.io"
      }
    },
    "NakedRecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "Name": {
          "Fn::If": [
            "Prod",
            "santaswap.io",
            "phillip.santaswap.io"
          ]
        },
        "Type": "A",
        "AliasTarget": {
          "DNSName": {
            "Fn::If": [
              "Prod",
              {
                "Fn::GetAtt": "CDN.DomainName"
              },
              {
                "Fn::FindInMap": [
                  "S3Domains",
                  {
                    "Ref": "AWS::Region"
                  },
                  "DNS"
                ]
              }
            ]
          },
          "HostedZoneId": {
            "Fn::If": [
              "Prod",
              "Z2FDTNDATAQYW2",
              {
                "Fn::FindInMap": [
                  "S3Domains",
                  {
                    "Ref": "AWS::Region"
                  },
                  "HostedZoneId"
                ]
              }
            ]
          }
        },
        "HostedZoneId": "Z2KUIEZRJCS4LU"
      }
    },
    "WWWRecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "Name": {
          "Fn::If": [
            "Prod",
            "www.santaswap.io",
            "www.phillip.santaswap.io"
          ]
        },
        "Type": "A",
        "AliasTarget": {
          "DNSName": {
            "Fn::If": [
              "Prod",
              {
                "Fn::GetAtt": "CDN.DomainName"
              },
              {
                "Fn::FindInMap": [
                  "S3Domains",
                  {
                    "Ref": "AWS::Region"
                  },
                  "DNS"
                ]
              }
            ]
          },
          "HostedZoneId": {
            "Fn::If": [
              "Prod",
              "Z2FDTNDATAQYW2",
              {
                "Fn::FindInMap": [
                  "S3Domains",
                  {
                    "Ref": "AWS::Region"
                  },
                  "HostedZoneId"
                ]
              }
            ]
          }
        },
        "HostedZoneId": "Z2KUIEZRJCS4LU"
      }
    },
    "CDN": {
      "Type": "AWS::CloudFront::Distribution",
      "Condition": "Prod",
      "Properties": {
        "DistributionConfig": {
          "Aliases": [
            "santaswap.io",
            "www.santaswap.io"
          ],
          "CustomErrorResponses": [
            {
              "ErrorCode": 404,
              "ErrorCachingMinTTL": 0,
              "ResponseCode": 200,
              "ResponsePagePath": "/index.html"
            },
            {
              "ErrorCode": 403,
              "ErrorCachingMinTTL": 0,
              "ResponseCode": 200,
              "ResponsePagePath": "/index.html"
            }
          ],
          "DefaultCacheBehavior": {
            "AllowedMethods": [
              "GET",
              "HEAD",
              "OPTIONS"
            ],
            "TargetOriginId": "StaticSiteOrigin",
            "ForwardedValues": {
              "QueryString": true,
              "Cookies": {
                "Forward": "none"
              }
            },
            "DefaultTTL": 0,
            "MinTTL": 0,
            "MaxTTL": 0,
            "ViewerProtocolPolicy": "redirect-to-https"
          },
          "DefaultRootObject": "index.html",
          "Enabled": true,
          "Origins": [
            {
              "DomainName": {
                "Fn::GetAtt": "S3BucketSite.DomainName"
              },
              "Id": "StaticSiteOrigin",
              "S3OriginConfig": {
                "OriginAccessIdentity": ""
              }
            }
          ],
          "PriceClass": "PriceClass_100",
          "ViewerCertificate": {
            "AcmCertificateArn": {
              "Ref": "DomainCertificate"
            },
            "SslSupportMethod": "sni-only"
          }
        }
      }
    },
    "DomainCertificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "Condition": "Prod",
      "Properties": {
        "DomainName": "*.santaswap.io",
        "DomainValidationOptions": [
          {
            "DomainName": "*.santaswap.io",
            "ValidationDomain": "santaswap.io"
          }
        ],
        "SubjectAlternativeNames": [
          "santaswap.io"
        ]
      }
    },
    "EmptySiteBucket": {
      "Type": "Custom::EmptySiteBucket",
      "DependsOn": "S3BucketSite",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": "EmptyBucketLambdaFunction.Arn"
        },
        "BucketName": {
          "Ref": "S3BucketSite"
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "automation-serverlessartifact-109092357768"
    },
    "EmptyBucketLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EmptyBucketLambdaVersionDuZZ5iQlNjByv2X0xkPEOdX1BkTebUInrUWveqvItI"
      }
    },
    "BucketEventLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "BucketEventLambdaVersionDuZZ5iQlNjByv2X0xkPEOdX1BkTebUInrUWveqvItI"
      }
    },
    "InvalidateCDNLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "InvalidateCDNLambdaVersionDuZZ5iQlNjByv2X0xkPEOdX1BkTebUInrUWveqvItI"
      }
    }
  },
  "Conditions": {
    "Prod": {
      "Fn::Equals": [
        "phillip",
        "prod"
      ]
    }
  },
  "Mappings": {
    "S3Domains": {
      "us-east-1": {
        "DNS": "s3-website-us-east-1.amazonaws.com",
        "HostedZoneId": "Z3AQBSTGFYJSTF"
      }
    }
  }
}