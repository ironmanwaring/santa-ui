service: santaSwap-ui

provider:
  name: aws
  runtime: nodejs4.3
  stage: local
  deploymentBucket: automation-serverlessartifact-${opt:accountId, env:ACCOUNT_ID}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: '*'

custom:
  domain:
    prod: ${opt:domain, env:DOMAIN}
    stage: ${opt:stage, self:provider.stage}.${opt:domain, env:DOMAIN}
  cloudFrontHostedZoneId: Z2FDTNDATAQYW2
  domainHostedZoneId: ${opt:domainHostedZoneId, env:DOMAIN_HOSTED_ZONE_ID}

functions:

  emptyBucket:
    handler: empty-bucket.handler

  bucketEvent:
    handler: bucket-event.handler
    environment:
      SITE_UPDATED_SNS: { Ref: 'SNSTopicSiteUpdated${opt:stage, self:provider.stage}' }

  invalidateCDN:
    handler: invalidate-cdn.handler
    events:
      - sns: 'SiteUpdated${opt:stage, self:provider.stage}'
    environment:
      CDN:
        'Fn::If': [ Prod, { Ref: CDN }, '' ]

resources:
  
  Description: Self contained Santa Swap ui application code and infrastructure including hosting, DNS, CDN, and certificates

  Conditions:
    Prod:
      Fn::Equals: [ '${opt:stage, self:provider.stage}', prod ]
  
  Mappings:
    S3Domains:
      us-east-1:
        DNS: s3-website-us-east-1.amazonaws.com
        HostedZoneId: Z3AQBSTGFYJSTF

  Resources:

    S3BucketSite:
      Type: AWS::S3::Bucket
      DependsOn:
        - BucketEventLambdaPermissionS3BucketS3
      Properties:
        BucketName: ${self:custom.domain.stage}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: 's3:ObjectCreated:*'
              Filter:
                S3Key:
                  Rules:
                    - Name: suffix
                      Value: index.html 
              Function:
                'Fn::GetAtt': [ BucketEventLambdaFunction, Arn ]

    BucketEventLambdaPermissionS3BucketS3:
      DependsOn:
        - BucketEventLambdaFunction
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          'Fn::GetAtt': [ BucketEventLambdaFunction, Arn ]
        Action: 'lambda:InvokeFunction'
        Principal: 's3.amazonaws.com'
        SourceArn: 'arn:aws:s3:::${self:custom.domain.stage}'
            
    NakedRecordSet:
      Type: AWS::Route53::RecordSet
      Properties:
        Name:
          Fn::If: [ Prod, '${self:custom.domain.prod}', '${self:custom.domain.stage}' ]
        Type: A
        AliasTarget:
          DNSName:
            Fn::If:
              - Prod
              - Fn::GetAtt: CDN.DomainName
              - Fn::FindInMap: [ S3Domains, { Ref: AWS::Region }, DNS ]
          HostedZoneId:
            Fn::If:
              - Prod
              - ${self:custom.cloudFrontHostedZoneId}
              - Fn::FindInMap: [ S3Domains, { Ref: AWS::Region }, HostedZoneId ]
        HostedZoneId: ${self:custom.domainHostedZoneId}
    
    WWWRecordSet:
      Type: AWS::Route53::RecordSet
      Properties:
        Name:
          Fn::If: [ Prod, 'www.${self:custom.domain.prod}', 'www.${self:custom.domain.stage}' ]
        Type: A
        AliasTarget:
          DNSName:
            Fn::If:
              - Prod
              - Fn::GetAtt: CDN.DomainName
              - Fn::FindInMap: [ S3Domains, { Ref: AWS::Region }, DNS ]
          HostedZoneId:
            Fn::If:
              - Prod
              - ${self:custom.cloudFrontHostedZoneId}
              - Fn::FindInMap: [ S3Domains, { Ref: AWS::Region }, HostedZoneId ]
        HostedZoneId: ${self:custom.domainHostedZoneId}

    CDN:
      Type: AWS::CloudFront::Distribution
      Condition: Prod
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.domain.prod}
            - www.${self:custom.domain.prod}
          CustomErrorResponses:
            - ErrorCode: 404
              ErrorCachingMinTTL: 0
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCode: 403
              ErrorCachingMinTTL: 0
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods: [ GET, HEAD, OPTIONS ]
            TargetOriginId: StaticSiteOrigin
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            DefaultTTL: 2592000 # 1 month
            MinTTL: 2592000 # 1 month
            MaxTTL: 31536000 # 1 year
            ViewerProtocolPolicy: redirect-to-https
          DefaultRootObject: index.html
          Enabled: true
          Origins:
            - DomainName:
                Fn::GetAtt : S3BucketSite.DomainName
              Id: StaticSiteOrigin
              S3OriginConfig:
                OriginAccessIdentity: ''
          PriceClass: PriceClass_100
          ViewerCertificate:
            AcmCertificateArn:
              Ref: DomainCertificate
            SslSupportMethod: sni-only

    DomainCertificate:
      Type: AWS::CertificateManager::Certificate
      Condition: Prod
      Properties:
        DomainName: '*.${self:custom.domain.prod}'
        DomainValidationOptions:
          - DomainName: '*.${self:custom.domain.prod}'
            ValidationDomain: ${self:custom.domain.prod}
        SubjectAlternativeNames:
          - ${self:custom.domain.prod}

    EmptySiteBucket:
      Type: Custom::EmptySiteBucket
      DependsOn: S3BucketSite
      Properties:  
        ServiceToken:
          Fn::GetAtt: EmptyBucketLambdaFunction.Arn
        BucketName:
          Ref: S3BucketSite
